// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema extra scalars 1`] = `
"type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  extraScalarsIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ExtraScalarsConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  extraScalarsList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ExtraScalarsConnection
}

"""A connection to a list of items."""
type ExtraScalarsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExtraScalarsEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ExtraScalarsEdge {
  """The item at the end of the edge"""
  node: ExtraScalars

  """A cursor for use in pagination"""
  cursor: String!
}

type ExtraScalars implements Node {
  id: ID!
  accountID: ChainAgnosticAccountID
  chainID: ChainAgnosticChainID
  cid: InterPlanetaryCID
  commitID: CeramicCommitID
  countryCode: CountryCode
  date: Date
  dateTime: DateTime
  did: CeramicAccount
  latitude: Float
  localDate: LocalDate
  locale: Locale
  localTime: LocalTime
  longitude: Float
  streamID: CeramicStreamID
  time: Time
  timeZone: TimeZone
  uri: URI
  utcOffset: UtcOffset
}

"""A Chain Agnostic AccountId"""
scalar ChainAgnosticAccountID @specifiedBy(url: "https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md")

"""A Chain Agnostic ChainId"""
scalar ChainAgnosticChainID @specifiedBy(url: "https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md")

"""A IPLD CID"""
scalar InterPlanetaryCID @specifiedBy(url: "https://github.com/multiformats/cid")

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#commitid")

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar CountryCode

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A local date string (i.e., with no associated timezone) in \`YYYY-MM-DD\` format, e.g. \`2020-01-01\`.
"""
scalar LocalDate

"""The locale in the format of a BCP 47 (RFC 5646) standard string"""
scalar Locale

"""
A local time string (i.e., with no associated timezone) in 24-hr \`HH:mm[:ss[.SSS]]\` format, e.g. \`14:25\` or \`14:25:06\` or \`14:25:06.123\`.
"""
scalar LocalTime

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#streamid")

"""
A time string at UTC, such as 10:15:30Z, compliant with the \`full-time\` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
A field whose value exists in the standard IANA Time Zone Database: https://www.iana.org/time-zones
"""
scalar TimeZone

"""
A field whose value conforms to the standard Uniform Resource Identifier (URI) format as specified in RFC3986.
"""
scalar URI @specifiedBy(url: "https://www.ietf.org/rfc/rfc3986.txt")

"""
A field whose value is a UTC Offset: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
"""
scalar UtcOffset

type Mutation {
  createExtraScalars(input: CreateExtraScalarsInput!): CreateExtraScalarsPayload
  updateExtraScalars(input: UpdateExtraScalarsInput!): UpdateExtraScalarsPayload
}

type CreateExtraScalarsPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: ExtraScalars!
  clientMutationId: String
}

input CreateExtraScalarsInput {
  content: ExtraScalarsInput!
  clientMutationId: String
}

input ExtraScalarsInput {
  accountID: ChainAgnosticAccountID
  chainID: ChainAgnosticChainID
  cid: InterPlanetaryCID
  commitID: CeramicCommitID
  countryCode: CountryCode
  date: Date
  dateTime: DateTime
  did: DID
  latitude: Float
  localDate: LocalDate
  locale: Locale
  localTime: LocalTime
  longitude: Float
  streamID: CeramicStreamID
  time: Time
  timeZone: TimeZone
  uri: URI
  utcOffset: UtcOffset
}

"""
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
"""
scalar DID @specifiedBy(url: "https://www.w3.org/TR/did-core/")

type UpdateExtraScalarsPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: ExtraScalars!
  clientMutationId: String
}

input UpdateExtraScalarsInput {
  id: ID!
  content: PartialExtraScalarsInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialExtraScalarsInput {
  accountID: ChainAgnosticAccountID
  chainID: ChainAgnosticChainID
  cid: InterPlanetaryCID
  commitID: CeramicCommitID
  countryCode: CountryCode
  date: Date
  dateTime: DateTime
  did: DID
  latitude: Float
  localDate: LocalDate
  locale: Locale
  localTime: LocalTime
  longitude: Float
  streamID: CeramicStreamID
  time: Time
  timeZone: TimeZone
  uri: URI
  utcOffset: UtcOffset
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}"
`;

exports[`schema note 1`] = `
"type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  noteIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): NoteConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  noteList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): NoteConnection
}

"""A connection to a list of items."""
type NoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge"""
  node: Note

  """A cursor for use in pagination"""
  cursor: String!
}

type Note implements Node {
  id: ID!
  status: NoteStatus
  title: String!
  text: String!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
}

enum NoteStatus {
  DEFAULT
  IMPORTANT
  ARCHIVE
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#commitid")

type Mutation {
  createNote(input: CreateNoteInput!): CreateNotePayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
}

type CreateNotePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Note!
  clientMutationId: String
}

input CreateNoteInput {
  content: NoteInput!
  clientMutationId: String
}

input NoteInput {
  status: NoteStatus
  title: String!
  text: String!
}

type UpdateNotePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Note!
  clientMutationId: String
}

input UpdateNoteInput {
  id: ID!
  content: PartialNoteInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialNoteInput {
  status: NoteStatus
  title: String
  text: String
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}"
`;

exports[`schema post and comments 1`] = `
"type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  commentIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CommentConnection
  postIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  commentList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CommentConnection
  postList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

type Comment implements Node {
  id: ID!
  postID: CeramicStreamID!
  text: String!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  post: Post
}

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#streamid")

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#commitid")

type Post implements Node {
  id: ID!
  date: DateTime
  title: String!
  text: String!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  commentsCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  comments(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): CommentConnection!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createComment(input: CreateCommentInput!): CreateCommentPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  createPost(input: CreatePostInput!): CreatePostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
}

type CreateCommentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Comment!
  clientMutationId: String
}

input CreateCommentInput {
  content: CommentInput!
  clientMutationId: String
}

input CommentInput {
  postID: CeramicStreamID!
  text: String!
}

type UpdateCommentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Comment!
  clientMutationId: String
}

input UpdateCommentInput {
  id: ID!
  content: PartialCommentInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialCommentInput {
  postID: CeramicStreamID
  text: String
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

type CreatePostPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input CreatePostInput {
  content: PostInput!
  clientMutationId: String
}

input PostInput {
  date: DateTime
  title: String!
  text: String!
}

type UpdatePostPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input UpdatePostInput {
  id: ID!
  content: PartialPostInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialPostInput {
  date: DateTime
  title: String
  text: String
}"
`;

exports[`schema profile 1`] = `
"type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  genericProfileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): GenericProfileConnection
  socialProfileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): SocialProfileConnection
  personProfileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PersonProfileConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  genericProfile: GenericProfile
  socialProfile: SocialProfile
  personProfile: PersonProfile
}

type GenericProfile implements Node {
  id: ID!
  name: String
  image: ImageSources
}

type ImageSources {
  original: ImageMetadata!
  alternatives: [ImageMetadata]
}

type ImageMetadata {
  src: String!
  mimeType: String!
  width: Int!
  height: Int!
  size: Int
}

type SocialProfile implements Node {
  id: ID!
  description: String
  emoji: String
  background: ImageSources
  url: String
}

type PersonProfile implements Node {
  id: ID!
  birthDate: Date
  gender: String
  homeLocation: String
  residenceCountry: CountryCode
  nationalities: [CountryCode]
  affiliations: [String]
}

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar CountryCode

"""A connection to a list of items."""
type GenericProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GenericProfileEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type GenericProfileEdge {
  """The item at the end of the edge"""
  node: GenericProfile

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type SocialProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SocialProfileEdge]
}

"""An edge in a connection."""
type SocialProfileEdge {
  """The item at the end of the edge"""
  node: SocialProfile

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type PersonProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonProfileEdge]
}

"""An edge in a connection."""
type PersonProfileEdge {
  """The item at the end of the edge"""
  node: PersonProfile

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createGenericProfile(input: CreateGenericProfileInput!): CreateGenericProfilePayload
  updateGenericProfile(input: UpdateGenericProfileInput!): UpdateGenericProfilePayload
  createSocialProfile(input: CreateSocialProfileInput!): CreateSocialProfilePayload
  updateSocialProfile(input: UpdateSocialProfileInput!): UpdateSocialProfilePayload
  createPersonProfile(input: CreatePersonProfileInput!): CreatePersonProfilePayload
  updatePersonProfile(input: UpdatePersonProfileInput!): UpdatePersonProfilePayload
}

type CreateGenericProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: GenericProfile!
  clientMutationId: String
}

input CreateGenericProfileInput {
  content: GenericProfileInput!
  clientMutationId: String
}

input GenericProfileInput {
  name: String
  image: ImageSourcesInput
}

input ImageSourcesInput {
  original: ImageMetadataInput!
  alternatives: [ImageMetadataInput]
}

input ImageMetadataInput {
  src: String!
  mimeType: String!
  width: Int!
  height: Int!
  size: Int
}

type UpdateGenericProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: GenericProfile!
  clientMutationId: String
}

input UpdateGenericProfileInput {
  id: ID!
  content: PartialGenericProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialGenericProfileInput {
  name: String
  image: ImageSourcesInput
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#commitid")

type CreateSocialProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: SocialProfile!
  clientMutationId: String
}

input CreateSocialProfileInput {
  content: SocialProfileInput!
  clientMutationId: String
}

input SocialProfileInput {
  description: String
  emoji: String
  background: ImageSourcesInput
  url: String
}

type UpdateSocialProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: SocialProfile!
  clientMutationId: String
}

input UpdateSocialProfileInput {
  id: ID!
  content: PartialSocialProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialSocialProfileInput {
  description: String
  emoji: String
  background: ImageSourcesInput
  url: String
}

type CreatePersonProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: PersonProfile!
  clientMutationId: String
}

input CreatePersonProfileInput {
  content: PersonProfileInput!
  clientMutationId: String
}

input PersonProfileInput {
  birthDate: Date
  gender: String
  homeLocation: String
  residenceCountry: CountryCode
  nationalities: [CountryCode]
  affiliations: [String]
}

type UpdatePersonProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: PersonProfile!
  clientMutationId: String
}

input UpdatePersonProfileInput {
  id: ID!
  content: PartialPersonProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialPersonProfileInput {
  birthDate: Date
  gender: String
  homeLocation: String
  residenceCountry: CountryCode
  nationalities: [CountryCode]
  affiliations: [String]
}"
`;
