// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema media interfaces 1`] = `
"type Query {
  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  mediaMetadataIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MediaMetadataFiltersInput
    sorting: MediaMetadataSortingInput
  ): MediaMetadataConnection
  mediaMetadataCount(filters: MediaMetadataFiltersInput): Int!
  collectionItemIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection
  collectionItemCount(filters: CollectionItemFiltersInput): Int!
  collectionIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CollectionFiltersInput
    sorting: CollectionSortingInput
  ): CollectionConnection
  collectionCount(filters: CollectionFiltersInput): Int!
  visualMediaIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: VisualMediaFiltersInput
    sorting: VisualMediaSortingInput
  ): VisualMediaConnection
  visualMediaCount(filters: VisualMediaFiltersInput): Int!
  timeMediaIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: TimeMediaFiltersInput
    sorting: TimeMediaSortingInput
  ): TimeMediaConnection
  timeMediaCount(filters: TimeMediaFiltersInput): Int!
  imageMediaIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: ImageMediaFiltersInput
    sorting: ImageMediaSortingInput
  ): ImageMediaConnection
  imageMediaCount(filters: ImageMediaFiltersInput): Int!
  audioMediaIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AudioMediaFiltersInput
    sorting: AudioMediaSortingInput
  ): AudioMediaConnection
  audioMediaCount(filters: AudioMediaFiltersInput): Int!
  videoMediaIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: VideoMediaFiltersInput
    sorting: VideoMediaSortingInput
  ): VideoMediaConnection
  videoMediaCount(filters: VideoMediaFiltersInput): Int!
  myImageIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyImageFiltersInput
    sorting: MyImageSortingInput
  ): MyImageConnection
  myImageCount(filters: MyImageFiltersInput): Int!
  myAudioIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyAudioFiltersInput
    sorting: MyAudioSortingInput
  ): MyAudioConnection
  myAudioCount(filters: MyAudioFiltersInput): Int!
  myVideoIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyVideoFiltersInput
    sorting: MyVideoSortingInput
  ): MyVideoConnection
  myVideoCount(filters: MyVideoFiltersInput): Int!
  myMediaCollectionItemIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyMediaCollectionItemFiltersInput
    sorting: MyMediaCollectionItemSortingInput
  ): MyMediaCollectionItemConnection
  myMediaCollectionItemCount(filters: MyMediaCollectionItemFiltersInput): Int!
  myMediaCollectionIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyMediaCollectionFiltersInput
    sorting: MyMediaCollectionSortingInput
  ): MyMediaCollectionConnection
  myMediaCollectionCount(filters: MyMediaCollectionFiltersInput): Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  mediaMetadataList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MediaMetadataFiltersInput
    sorting: MediaMetadataSortingInput
  ): MediaMetadataConnection
  mediaMetadataListCount(filters: MediaMetadataFiltersInput): Int!
  collectionItemList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection
  collectionItemListCount(filters: CollectionItemFiltersInput): Int!
  collectionList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CollectionFiltersInput
    sorting: CollectionSortingInput
  ): CollectionConnection
  collectionListCount(filters: CollectionFiltersInput): Int!
  visualMediaList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: VisualMediaFiltersInput
    sorting: VisualMediaSortingInput
  ): VisualMediaConnection
  visualMediaListCount(filters: VisualMediaFiltersInput): Int!
  timeMediaList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: TimeMediaFiltersInput
    sorting: TimeMediaSortingInput
  ): TimeMediaConnection
  timeMediaListCount(filters: TimeMediaFiltersInput): Int!
  imageMediaList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: ImageMediaFiltersInput
    sorting: ImageMediaSortingInput
  ): ImageMediaConnection
  imageMediaListCount(filters: ImageMediaFiltersInput): Int!
  audioMediaList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: AudioMediaFiltersInput
    sorting: AudioMediaSortingInput
  ): AudioMediaConnection
  audioMediaListCount(filters: AudioMediaFiltersInput): Int!
  videoMediaList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: VideoMediaFiltersInput
    sorting: VideoMediaSortingInput
  ): VideoMediaConnection
  videoMediaListCount(filters: VideoMediaFiltersInput): Int!
  myImageList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyImageFiltersInput
    sorting: MyImageSortingInput
  ): MyImageConnection
  myImageListCount(filters: MyImageFiltersInput): Int!
  myAudioList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyAudioFiltersInput
    sorting: MyAudioSortingInput
  ): MyAudioConnection
  myAudioListCount(filters: MyAudioFiltersInput): Int!
  myVideoList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyVideoFiltersInput
    sorting: MyVideoSortingInput
  ): MyVideoConnection
  myVideoListCount(filters: MyVideoFiltersInput): Int!
  myMediaCollectionItemList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyMediaCollectionItemFiltersInput
    sorting: MyMediaCollectionItemSortingInput
  ): MyMediaCollectionItemConnection
  myMediaCollectionItemListCount(filters: MyMediaCollectionItemFiltersInput): Int!
  myMediaCollectionList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: MyMediaCollectionFiltersInput
    sorting: MyMediaCollectionSortingInput
  ): MyMediaCollectionConnection
  myMediaCollectionListCount(filters: MyMediaCollectionFiltersInput): Int!
}

"""A connection to a list of items."""
type MediaMetadataConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MediaMetadataEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type MediaMetadataEdge {
  """The item at the end of the edge"""
  node: MediaMetadata

  """A cursor for use in pagination"""
  cursor: String!
}

interface MediaMetadata {
  src: String!
  size: Int
  info: MediaInfo
  collectionItems(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection!
  collectionItemsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
  ): Int!
}

type MediaInfo {
  title: String!
  tag: String
}

"""A connection to a list of items."""
type CollectionItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CollectionItemEdge]
}

"""An edge in a connection."""
type CollectionItemEdge {
  """The item at the end of the edge"""
  node: CollectionItem

  """A cursor for use in pagination"""
  cursor: String!
}

interface CollectionItem {
  collectionID: CeramicStreamID!
  itemID: CeramicStreamID!
  collection: Node
  item: Node
}

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#streamid")

input CollectionItemFiltersInput {
  where: CollectionItemObjectFilterInput
  and: [CollectionItemFiltersInput!]
  or: [CollectionItemFiltersInput!]
  not: CollectionItemFiltersInput
}

input CollectionItemObjectFilterInput {
  collectionID: StringValueFilterInput
  itemID: StringValueFilterInput
}

input StringValueFilterInput {
  isNull: Boolean
  equalTo: String
  notEqualTo: String
  in: [String!]
  notIn: [String!]
  lessThan: String
  lessThanOrEqualTo: String
  greaterThan: String
  greaterThanOrEqualTo: String
}

input CollectionItemSortingInput {
  collectionID: SortOrder
  itemID: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

input MediaMetadataFiltersInput {
  where: MediaMetadataObjectFilterInput
  and: [MediaMetadataFiltersInput!]
  or: [MediaMetadataFiltersInput!]
  not: MediaMetadataFiltersInput
}

input MediaMetadataObjectFilterInput {
  src: StringValueFilterInput
  size: IntValueFilterInput
}

input IntValueFilterInput {
  isNull: Boolean
  equalTo: Int
  notEqualTo: Int
  in: [Int!]
  notIn: [Int!]
  lessThan: Int
  lessThanOrEqualTo: Int
  greaterThan: Int
  greaterThanOrEqualTo: Int
}

input MediaMetadataSortingInput {
  src: SortOrder
  size: SortOrder
}

"""A connection to a list of items."""
type CollectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CollectionEdge]
}

"""An edge in a connection."""
type CollectionEdge {
  """The item at the end of the edge"""
  node: Collection

  """A cursor for use in pagination"""
  cursor: String!
}

interface Collection {
  name: String!
  description: String
  items(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection!
  itemsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
  ): Int!
}

input CollectionFiltersInput {
  where: CollectionObjectFilterInput
  and: [CollectionFiltersInput!]
  or: [CollectionFiltersInput!]
  not: CollectionFiltersInput
}

input CollectionObjectFilterInput {
  name: StringValueFilterInput
  description: StringValueFilterInput
}

input CollectionSortingInput {
  name: SortOrder
  description: SortOrder
}

"""A connection to a list of items."""
type VisualMediaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VisualMediaEdge]
}

"""An edge in a connection."""
type VisualMediaEdge {
  """The item at the end of the edge"""
  node: VisualMedia

  """A cursor for use in pagination"""
  cursor: String!
}

interface VisualMedia {
  width: Int!
  height: Int!
}

input VisualMediaFiltersInput {
  where: VisualMediaObjectFilterInput
  and: [VisualMediaFiltersInput!]
  or: [VisualMediaFiltersInput!]
  not: VisualMediaFiltersInput
}

input VisualMediaObjectFilterInput {
  width: IntValueFilterInput
  height: IntValueFilterInput
}

input VisualMediaSortingInput {
  width: SortOrder
  height: SortOrder
}

"""A connection to a list of items."""
type TimeMediaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeMediaEdge]
}

"""An edge in a connection."""
type TimeMediaEdge {
  """The item at the end of the edge"""
  node: TimeMedia

  """A cursor for use in pagination"""
  cursor: String!
}

interface TimeMedia {
  duration: Duration!
}

"\\n    A string representing a duration conforming to the ISO8601 standard,\\n    such as: P1W1DT13H23M34S\\n    P is the duration designator (for period) placed at the start of the duration representation.\\n    Y is the year designator that follows the value for the number of years.\\n    M is the month designator that follows the value for the number of months.\\n    W is the week designator that follows the value for the number of weeks.\\n    D is the day designator that follows the value for the number of days.\\n    T is the time designator that precedes the time components of the representation.\\n    H is the hour designator that follows the value for the number of hours.\\n    M is the minute designator that follows the value for the number of minutes.\\n    S is the second designator that follows the value for the number of seconds.\\n\\n    Note the time designator, T, that precedes the time value.\\n\\n    Matches moment.js, Luxon and DateFns implementations\\n    ,/. is valid for decimal places and +/- is a valid prefix\\n  "
scalar Duration

input TimeMediaFiltersInput {
  where: TimeMediaObjectFilterInput
  and: [TimeMediaFiltersInput!]
  or: [TimeMediaFiltersInput!]
  not: TimeMediaFiltersInput
}

input TimeMediaObjectFilterInput {
  duration: StringValueFilterInput
}

input TimeMediaSortingInput {
  duration: SortOrder
}

"""A connection to a list of items."""
type ImageMediaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageMediaEdge]
}

"""An edge in a connection."""
type ImageMediaEdge {
  """The item at the end of the edge"""
  node: ImageMedia

  """A cursor for use in pagination"""
  cursor: String!
}

interface ImageMedia implements MediaMetadata & VisualMedia {
  src: String!
  size: Int
  width: Int!
  height: Int!
  info: MediaInfo
  collectionItems(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection!
  collectionItemsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
  ): Int!
}

input ImageMediaFiltersInput {
  where: ImageMediaObjectFilterInput
  and: [ImageMediaFiltersInput!]
  or: [ImageMediaFiltersInput!]
  not: ImageMediaFiltersInput
}

input ImageMediaObjectFilterInput {
  src: StringValueFilterInput
  size: IntValueFilterInput
  width: IntValueFilterInput
  height: IntValueFilterInput
}

input ImageMediaSortingInput {
  src: SortOrder
  size: SortOrder
  width: SortOrder
  height: SortOrder
}

"""A connection to a list of items."""
type AudioMediaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AudioMediaEdge]
}

"""An edge in a connection."""
type AudioMediaEdge {
  """The item at the end of the edge"""
  node: AudioMedia

  """A cursor for use in pagination"""
  cursor: String!
}

interface AudioMedia implements MediaMetadata & TimeMedia {
  src: String!
  size: Int
  duration: Duration!
  info: MediaInfo
  collectionItems(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection!
  collectionItemsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
  ): Int!
}

input AudioMediaFiltersInput {
  where: AudioMediaObjectFilterInput
  and: [AudioMediaFiltersInput!]
  or: [AudioMediaFiltersInput!]
  not: AudioMediaFiltersInput
}

input AudioMediaObjectFilterInput {
  src: StringValueFilterInput
  size: IntValueFilterInput
  duration: StringValueFilterInput
}

input AudioMediaSortingInput {
  src: SortOrder
  size: SortOrder
  duration: SortOrder
}

"""A connection to a list of items."""
type VideoMediaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VideoMediaEdge]
}

"""An edge in a connection."""
type VideoMediaEdge {
  """The item at the end of the edge"""
  node: VideoMedia

  """A cursor for use in pagination"""
  cursor: String!
}

interface VideoMedia implements MediaMetadata & VisualMedia & TimeMedia {
  src: String!
  size: Int
  duration: Duration!
  width: Int!
  height: Int!
  info: MediaInfo
  collectionItems(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection!
  collectionItemsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
  ): Int!
}

input VideoMediaFiltersInput {
  where: VideoMediaObjectFilterInput
  and: [VideoMediaFiltersInput!]
  or: [VideoMediaFiltersInput!]
  not: VideoMediaFiltersInput
}

input VideoMediaObjectFilterInput {
  src: StringValueFilterInput
  size: IntValueFilterInput
  duration: StringValueFilterInput
  width: IntValueFilterInput
  height: IntValueFilterInput
}

input VideoMediaSortingInput {
  src: SortOrder
  size: SortOrder
  duration: SortOrder
  width: SortOrder
  height: SortOrder
}

"""A connection to a list of items."""
type MyImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyImageEdge]
}

"""An edge in a connection."""
type MyImageEdge {
  """The item at the end of the edge"""
  node: MyImage

  """A cursor for use in pagination"""
  cursor: String!
}

type MyImage implements Node & ImageMedia & MediaMetadata & VisualMedia {
  id: ID!
  src: String!
  size: Int
  width: Int!
  height: Int!
  info: MediaInfo
  collectionItems(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection!
  collectionItemsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
  ): Int!
}

input MyImageFiltersInput {
  where: MyImageObjectFilterInput
  and: [MyImageFiltersInput!]
  or: [MyImageFiltersInput!]
  not: MyImageFiltersInput
}

input MyImageObjectFilterInput {
  src: StringValueFilterInput
  width: IntValueFilterInput
  height: IntValueFilterInput
}

input MyImageSortingInput {
  src: SortOrder
  width: SortOrder
  height: SortOrder
}

"""A connection to a list of items."""
type MyAudioConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyAudioEdge]
}

"""An edge in a connection."""
type MyAudioEdge {
  """The item at the end of the edge"""
  node: MyAudio

  """A cursor for use in pagination"""
  cursor: String!
}

type MyAudio implements Node & AudioMedia & MediaMetadata & TimeMedia {
  id: ID!
  src: String!
  size: Int
  duration: Duration!
  info: MediaInfo
  collectionItems(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection!
  collectionItemsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
  ): Int!
}

input MyAudioFiltersInput {
  where: MyAudioObjectFilterInput
  and: [MyAudioFiltersInput!]
  or: [MyAudioFiltersInput!]
  not: MyAudioFiltersInput
}

input MyAudioObjectFilterInput {
  duration: StringValueFilterInput
}

input MyAudioSortingInput {
  duration: SortOrder
}

"""A connection to a list of items."""
type MyVideoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyVideoEdge]
}

"""An edge in a connection."""
type MyVideoEdge {
  """The item at the end of the edge"""
  node: MyVideo

  """A cursor for use in pagination"""
  cursor: String!
}

type MyVideo implements Node & VideoMedia & MediaMetadata & VisualMedia & TimeMedia {
  id: ID!
  src: String!
  size: Int
  duration: Duration!
  width: Int!
  height: Int!
  info: MediaInfo
  collectionItems(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection!
  collectionItemsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
  ): Int!
}

input MyVideoFiltersInput {
  where: MyVideoObjectFilterInput
  and: [MyVideoFiltersInput!]
  or: [MyVideoFiltersInput!]
  not: MyVideoFiltersInput
}

input MyVideoObjectFilterInput {
  src: StringValueFilterInput
  duration: StringValueFilterInput
  width: IntValueFilterInput
  height: IntValueFilterInput
}

input MyVideoSortingInput {
  src: SortOrder
  duration: SortOrder
  width: SortOrder
  height: SortOrder
}

"""A connection to a list of items."""
type MyMediaCollectionItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyMediaCollectionItemEdge]
}

"""An edge in a connection."""
type MyMediaCollectionItemEdge {
  """The item at the end of the edge"""
  node: MyMediaCollectionItem

  """A cursor for use in pagination"""
  cursor: String!
}

type MyMediaCollectionItem implements Node & CollectionItem {
  id: ID!
  collectionID: CeramicStreamID!
  itemID: CeramicStreamID!
  createdAt: DateTime!
  collection: Node
  item: Node
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input MyMediaCollectionItemFiltersInput {
  where: MyMediaCollectionItemObjectFilterInput
  and: [MyMediaCollectionItemFiltersInput!]
  or: [MyMediaCollectionItemFiltersInput!]
  not: MyMediaCollectionItemFiltersInput
}

input MyMediaCollectionItemObjectFilterInput {
  createdAt: StringValueFilterInput
}

input MyMediaCollectionItemSortingInput {
  createdAt: SortOrder
}

"""A connection to a list of items."""
type MyMediaCollectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyMediaCollectionEdge]
}

"""An edge in a connection."""
type MyMediaCollectionEdge {
  """The item at the end of the edge"""
  node: MyMediaCollection

  """A cursor for use in pagination"""
  cursor: String!
}

type MyMediaCollection implements Node & Collection {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  items(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
    sorting: CollectionItemSortingInput
  ): CollectionItemConnection!
  itemsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CollectionItemFiltersInput
  ): Int!
}

input MyMediaCollectionFiltersInput {
  where: MyMediaCollectionObjectFilterInput
  and: [MyMediaCollectionFiltersInput!]
  or: [MyMediaCollectionFiltersInput!]
  not: MyMediaCollectionFiltersInput
}

input MyMediaCollectionObjectFilterInput {
  createdAt: StringValueFilterInput
}

input MyMediaCollectionSortingInput {
  createdAt: SortOrder
}

type Mutation {
  createMyImage(input: CreateMyImageInput!): CreateMyImagePayload
  updateMyImage(input: UpdateMyImageInput!): UpdateMyImagePayload
  createMyAudio(input: CreateMyAudioInput!): CreateMyAudioPayload
  updateMyAudio(input: UpdateMyAudioInput!): UpdateMyAudioPayload
  createMyVideo(input: CreateMyVideoInput!): CreateMyVideoPayload
  updateMyVideo(input: UpdateMyVideoInput!): UpdateMyVideoPayload
  createMyMediaCollectionItem(input: CreateMyMediaCollectionItemInput!): CreateMyMediaCollectionItemPayload
  updateMyMediaCollectionItem(input: UpdateMyMediaCollectionItemInput!): UpdateMyMediaCollectionItemPayload
  createMyMediaCollection(input: CreateMyMediaCollectionInput!): CreateMyMediaCollectionPayload
  updateMyMediaCollection(input: UpdateMyMediaCollectionInput!): UpdateMyMediaCollectionPayload
}

type CreateMyImagePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyImage!
  clientMutationId: String
}

input CreateMyImageInput {
  content: MyImageInput!
  clientMutationId: String
}

input MyImageInput {
  src: String!
  size: Int
  width: Int!
  height: Int!
  info: MediaInfoInput
}

input MediaInfoInput {
  title: String!
  tag: String
}

type UpdateMyImagePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyImage!
  clientMutationId: String
}

input UpdateMyImageInput {
  id: ID!
  content: PartialMyImageInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialMyImageInput {
  src: String
  size: Int
  width: Int
  height: Int
  info: MediaInfoInput
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#commitid")

type CreateMyAudioPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyAudio!
  clientMutationId: String
}

input CreateMyAudioInput {
  content: MyAudioInput!
  clientMutationId: String
}

input MyAudioInput {
  src: String!
  size: Int
  duration: Duration!
  info: MediaInfoInput
}

type UpdateMyAudioPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyAudio!
  clientMutationId: String
}

input UpdateMyAudioInput {
  id: ID!
  content: PartialMyAudioInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialMyAudioInput {
  src: String
  size: Int
  duration: Duration
  info: MediaInfoInput
}

type CreateMyVideoPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyVideo!
  clientMutationId: String
}

input CreateMyVideoInput {
  content: MyVideoInput!
  clientMutationId: String
}

input MyVideoInput {
  src: String!
  size: Int
  duration: Duration!
  width: Int!
  height: Int!
  info: MediaInfoInput
}

type UpdateMyVideoPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyVideo!
  clientMutationId: String
}

input UpdateMyVideoInput {
  id: ID!
  content: PartialMyVideoInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialMyVideoInput {
  src: String
  size: Int
  duration: Duration
  width: Int
  height: Int
  info: MediaInfoInput
}

type CreateMyMediaCollectionItemPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyMediaCollectionItem!
  clientMutationId: String
}

input CreateMyMediaCollectionItemInput {
  content: MyMediaCollectionItemInput!
  clientMutationId: String
}

input MyMediaCollectionItemInput {
  collectionID: CeramicStreamID!
  itemID: CeramicStreamID!
  createdAt: DateTime!
}

type UpdateMyMediaCollectionItemPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyMediaCollectionItem!
  clientMutationId: String
}

input UpdateMyMediaCollectionItemInput {
  id: ID!
  content: PartialMyMediaCollectionItemInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialMyMediaCollectionItemInput {
  collectionID: CeramicStreamID
  itemID: CeramicStreamID
  createdAt: DateTime
}

type CreateMyMediaCollectionPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyMediaCollection!
  clientMutationId: String
}

input CreateMyMediaCollectionInput {
  content: MyMediaCollectionInput!
  clientMutationId: String
}

input MyMediaCollectionInput {
  name: String!
  description: String
  createdAt: DateTime!
}

type UpdateMyMediaCollectionPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: MyMediaCollection!
  clientMutationId: String
}

input UpdateMyMediaCollectionInput {
  id: ID!
  content: PartialMyMediaCollectionInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialMyMediaCollectionInput {
  name: String
  description: String
  createdAt: DateTime
}"
`;

exports[`schema note with enum support 1`] = `
"type Query {
  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  noteBookIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: NoteBookFiltersInput
    sorting: NoteBookSortingInput
  ): NoteBookConnection
  noteBookCount(filters: NoteBookFiltersInput): Int!
  noteIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: NoteFiltersInput
    sorting: NoteSortingInput
  ): NoteConnection
  noteCount(filters: NoteFiltersInput): Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  noteBookList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: NoteBookFiltersInput
    sorting: NoteBookSortingInput
  ): NoteBookConnection
  noteBookListCount(filters: NoteBookFiltersInput): Int!
  noteList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: NoteFiltersInput
    sorting: NoteSortingInput
  ): NoteConnection
  noteListCount(filters: NoteFiltersInput): Int!
}

"""A connection to a list of items."""
type NoteBookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteBookEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type NoteBookEdge {
  """The item at the end of the edge"""
  node: NoteBook

  """A cursor for use in pagination"""
  cursor: String!
}

type NoteBook implements Node {
  id: ID!
  title: String!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  notes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: NoteFiltersInput
    sorting: NoteSortingInput
  ): NoteConnection!
  notesCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: NoteFiltersInput
  ): Int!
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#commitid")

"""A connection to a list of items."""
type NoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteEdge]
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge"""
  node: Note

  """A cursor for use in pagination"""
  cursor: String!
}

type Note implements Node {
  id: ID!
  noteBookID: CeramicStreamID
  status: NoteStatus
  title: String!
  text: String!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  noteBook: NoteBook
}

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#streamid")

enum NoteStatus {
  DEFAULT
  IMPORTANT
  ARCHIVE
}

input NoteFiltersInput {
  where: NoteObjectFilterInput
  and: [NoteFiltersInput!]
  or: [NoteFiltersInput!]
  not: NoteFiltersInput
}

input NoteObjectFilterInput {
  title: StringValueFilterInput
}

input StringValueFilterInput {
  isNull: Boolean
  equalTo: String
  notEqualTo: String
  in: [String!]
  notIn: [String!]
  lessThan: String
  lessThanOrEqualTo: String
  greaterThan: String
  greaterThanOrEqualTo: String
}

input NoteSortingInput {
  title: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

input NoteBookFiltersInput {
  where: NoteBookObjectFilterInput
  and: [NoteBookFiltersInput!]
  or: [NoteBookFiltersInput!]
  not: NoteBookFiltersInput
}

input NoteBookObjectFilterInput {
  title: StringValueFilterInput
}

input NoteBookSortingInput {
  title: SortOrder
}

type Mutation {
  createNoteBook(input: CreateNoteBookInput!): CreateNoteBookPayload
  updateNoteBook(input: UpdateNoteBookInput!): UpdateNoteBookPayload
  createNote(input: CreateNoteInput!): CreateNotePayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
}

type CreateNoteBookPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: NoteBook!
  clientMutationId: String
}

input CreateNoteBookInput {
  content: NoteBookInput!
  clientMutationId: String
}

input NoteBookInput {
  title: String!
}

type UpdateNoteBookPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: NoteBook!
  clientMutationId: String
}

input UpdateNoteBookInput {
  id: ID!
  content: PartialNoteBookInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialNoteBookInput {
  title: String
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

type CreateNotePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Note!
  clientMutationId: String
}

input CreateNoteInput {
  content: NoteInput!
  clientMutationId: String
}

input NoteInput {
  noteBookID: CeramicStreamID
  status: NoteStatus
  title: String!
  text: String!
}

type UpdateNotePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Note!
  clientMutationId: String
}

input UpdateNoteInput {
  id: ID!
  content: PartialNoteInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialNoteInput {
  noteBookID: CeramicStreamID
  status: NoteStatus
  title: String
  text: String
}"
`;

exports[`schema post and comments with relations 1`] = `
"type Query {
  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  postIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: PostFiltersInput
    sorting: PostSortingInput
  ): PostConnection
  postCount(filters: PostFiltersInput): Int!
  commentIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CommentFiltersInput
    sorting: CommentSortingInput
  ): CommentConnection
  commentCount(filters: CommentFiltersInput): Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  postList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: PostFiltersInput
    sorting: PostSortingInput
  ): PostConnection
  postListCount(filters: PostFiltersInput): Int!
  commentList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CommentFiltersInput
    sorting: CommentSortingInput
  ): CommentConnection
  commentListCount(filters: CommentFiltersInput): Int!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

type Post implements Node {
  id: ID!
  date: DateTime
  title: String!
  text: String!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  commentsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CommentFiltersInput
  ): Int!
  comments(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CommentFiltersInput
    sorting: CommentSortingInput
  ): CommentConnection!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#commitid")

input CommentFiltersInput {
  where: CommentObjectFilterInput
  and: [CommentFiltersInput!]
  or: [CommentFiltersInput!]
  not: CommentFiltersInput
}

input CommentObjectFilterInput {
  text: StringValueFilterInput
}

input StringValueFilterInput {
  isNull: Boolean
  equalTo: String
  notEqualTo: String
  in: [String!]
  notIn: [String!]
  lessThan: String
  lessThanOrEqualTo: String
  greaterThan: String
  greaterThanOrEqualTo: String
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

type Comment implements Node {
  id: ID!
  postID: CeramicStreamID!
  text: String!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  post: Post
}

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#streamid")

input CommentSortingInput {
  text: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

input PostFiltersInput {
  where: PostObjectFilterInput
  and: [PostFiltersInput!]
  or: [PostFiltersInput!]
  not: PostFiltersInput
}

input PostObjectFilterInput {
  title: StringValueFilterInput
}

input PostSortingInput {
  title: SortOrder
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  createComment(input: CreateCommentInput!): CreateCommentPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
}

type CreatePostPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input CreatePostInput {
  content: PostInput!
  clientMutationId: String
}

input PostInput {
  date: DateTime
  title: String!
  text: String!
}

type UpdatePostPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input UpdatePostInput {
  id: ID!
  content: PartialPostInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialPostInput {
  date: DateTime
  title: String
  text: String
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

type CreateCommentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Comment!
  clientMutationId: String
}

input CreateCommentInput {
  content: CommentInput!
  clientMutationId: String
}

input CommentInput {
  postID: CeramicStreamID!
  text: String!
}

type UpdateCommentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Comment!
  clientMutationId: String
}

input UpdateCommentInput {
  id: ID!
  content: PartialCommentInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialCommentInput {
  postID: CeramicStreamID
  text: String
}"
`;

exports[`schema profiles with SINGLE account relation 1`] = `
"type Query {
  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  genericProfileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: GenericProfileFiltersInput
    sorting: GenericProfileSortingInput
  ): GenericProfileConnection
  genericProfileCount(filters: GenericProfileFiltersInput): Int!
  socialProfileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: SocialProfileFiltersInput
    sorting: SocialProfileSortingInput
  ): SocialProfileConnection
  socialProfileCount(filters: SocialProfileFiltersInput): Int!
  personProfileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: PersonProfileFiltersInput
    sorting: PersonProfileSortingInput
  ): PersonProfileConnection
  personProfileCount(filters: PersonProfileFiltersInput): Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  genericProfile: GenericProfile
  socialProfile: SocialProfile
  personProfile: PersonProfile
}

type GenericProfile implements Node {
  id: ID!
  name: String
  image: ImageSources
}

type ImageSources {
  original: ImageMetadata!
  alternatives: [ImageMetadata]
}

type ImageMetadata {
  src: String!
  mimeType: String!
  width: Int!
  height: Int!
  size: Int
}

type SocialProfile implements Node {
  id: ID!
  description: String
  emoji: String
  background: ImageSources
  url: String
}

type PersonProfile implements Node {
  id: ID!
  birthDate: Date
  gender: String
  homeLocation: String
  residenceCountry: CountryCode
  nationalities: [CountryCode]
  affiliations: [String]
}

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar CountryCode

"""A connection to a list of items."""
type GenericProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GenericProfileEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type GenericProfileEdge {
  """The item at the end of the edge"""
  node: GenericProfile

  """A cursor for use in pagination"""
  cursor: String!
}

input GenericProfileFiltersInput {
  where: GenericProfileObjectFilterInput
  and: [GenericProfileFiltersInput!]
  or: [GenericProfileFiltersInput!]
  not: GenericProfileFiltersInput
}

input GenericProfileObjectFilterInput {
  name: StringValueFilterInput
}

input StringValueFilterInput {
  isNull: Boolean
  equalTo: String
  notEqualTo: String
  in: [String!]
  notIn: [String!]
  lessThan: String
  lessThanOrEqualTo: String
  greaterThan: String
  greaterThanOrEqualTo: String
}

input GenericProfileSortingInput {
  name: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

"""A connection to a list of items."""
type SocialProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SocialProfileEdge]
}

"""An edge in a connection."""
type SocialProfileEdge {
  """The item at the end of the edge"""
  node: SocialProfile

  """A cursor for use in pagination"""
  cursor: String!
}

input SocialProfileFiltersInput {
  where: SocialProfileObjectFilterInput
  and: [SocialProfileFiltersInput!]
  or: [SocialProfileFiltersInput!]
  not: SocialProfileFiltersInput
}

input SocialProfileObjectFilterInput {
  url: StringValueFilterInput
}

input SocialProfileSortingInput {
  url: SortOrder
}

"""A connection to a list of items."""
type PersonProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonProfileEdge]
}

"""An edge in a connection."""
type PersonProfileEdge {
  """The item at the end of the edge"""
  node: PersonProfile

  """A cursor for use in pagination"""
  cursor: String!
}

input PersonProfileFiltersInput {
  where: PersonProfileObjectFilterInput
  and: [PersonProfileFiltersInput!]
  or: [PersonProfileFiltersInput!]
  not: PersonProfileFiltersInput
}

input PersonProfileObjectFilterInput {
  residenceCountry: StringValueFilterInput
}

input PersonProfileSortingInput {
  residenceCountry: SortOrder
}

type Mutation {
  createGenericProfile(input: CreateGenericProfileInput!): CreateGenericProfilePayload
  updateGenericProfile(input: UpdateGenericProfileInput!): UpdateGenericProfilePayload
  createSocialProfile(input: CreateSocialProfileInput!): CreateSocialProfilePayload
  updateSocialProfile(input: UpdateSocialProfileInput!): UpdateSocialProfilePayload
  createPersonProfile(input: CreatePersonProfileInput!): CreatePersonProfilePayload
  updatePersonProfile(input: UpdatePersonProfileInput!): UpdatePersonProfilePayload
}

type CreateGenericProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: GenericProfile!
  clientMutationId: String
}

input CreateGenericProfileInput {
  content: GenericProfileInput!
  options: SetOptionsInput
  clientMutationId: String
}

input GenericProfileInput {
  name: String
  image: ImageSourcesInput
}

input ImageSourcesInput {
  original: ImageMetadataInput!
  alternatives: [ImageMetadataInput]
}

input ImageMetadataInput {
  src: String!
  mimeType: String!
  width: Int!
  height: Int!
  size: Int
}

input SetOptionsInput {
  """
  Maximum amount of time to lookup the stream over the network, in seconds - see https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.CreateOpts.html#syncTimeoutSeconds
  """
  syncTimeout: Int
}

type UpdateGenericProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: GenericProfile!
  clientMutationId: String
}

input UpdateGenericProfileInput {
  id: ID!
  content: PartialGenericProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialGenericProfileInput {
  name: String
  image: ImageSourcesInput
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#commitid")

type CreateSocialProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: SocialProfile!
  clientMutationId: String
}

input CreateSocialProfileInput {
  content: SocialProfileInput!
  options: SetOptionsInput
  clientMutationId: String
}

input SocialProfileInput {
  description: String
  emoji: String
  background: ImageSourcesInput
  url: String
}

type UpdateSocialProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: SocialProfile!
  clientMutationId: String
}

input UpdateSocialProfileInput {
  id: ID!
  content: PartialSocialProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialSocialProfileInput {
  description: String
  emoji: String
  background: ImageSourcesInput
  url: String
}

type CreatePersonProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: PersonProfile!
  clientMutationId: String
}

input CreatePersonProfileInput {
  content: PersonProfileInput!
  options: SetOptionsInput
  clientMutationId: String
}

input PersonProfileInput {
  birthDate: Date
  gender: String
  homeLocation: String
  residenceCountry: CountryCode
  nationalities: [CountryCode]
  affiliations: [String]
}

type UpdatePersonProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: PersonProfile!
  clientMutationId: String
}

input UpdatePersonProfileInput {
  id: ID!
  content: PartialPersonProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialPersonProfileInput {
  birthDate: Date
  gender: String
  homeLocation: String
  residenceCountry: CountryCode
  nationalities: [CountryCode]
  affiliations: [String]
}"
`;

exports[`schema supported scalars 1`] = `
"type Query {
  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  extraScalarsIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: ExtraScalarsFiltersInput
    sorting: ExtraScalarsSortingInput
  ): ExtraScalarsConnection
  extraScalarsCount(filters: ExtraScalarsFiltersInput): Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  extraScalarsList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: ExtraScalarsFiltersInput
    sorting: ExtraScalarsSortingInput
  ): ExtraScalarsConnection
  extraScalarsListCount(filters: ExtraScalarsFiltersInput): Int!
}

"""A connection to a list of items."""
type ExtraScalarsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExtraScalarsEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ExtraScalarsEdge {
  """The item at the end of the edge"""
  node: ExtraScalars

  """A cursor for use in pagination"""
  cursor: String!
}

type ExtraScalars implements Node {
  id: ID!
  accountID: ChainAgnosticAccountID
  chainID: ChainAgnosticChainID
  cid: InterPlanetaryCID
  commitID: CeramicCommitID
  countryCode: CountryCode
  date: Date
  dateTime: DateTime
  did: CeramicAccount
  duration: Duration
  latitude: Float
  localDate: LocalDate
  locale: Locale
  localTime: LocalTime
  longitude: Float
  streamID: CeramicStreamID
  time: Time
  timeZone: TimeZone
  uri: URI
  utcOffset: UtcOffset
}

"""A Chain Agnostic AccountId"""
scalar ChainAgnosticAccountID @specifiedBy(url: "https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md")

"""A Chain Agnostic ChainId"""
scalar ChainAgnosticChainID @specifiedBy(url: "https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md")

"""A IPLD CID"""
scalar InterPlanetaryCID @specifiedBy(url: "https://github.com/multiformats/cid")

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#commitid")

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar CountryCode

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"\\n    A string representing a duration conforming to the ISO8601 standard,\\n    such as: P1W1DT13H23M34S\\n    P is the duration designator (for period) placed at the start of the duration representation.\\n    Y is the year designator that follows the value for the number of years.\\n    M is the month designator that follows the value for the number of months.\\n    W is the week designator that follows the value for the number of weeks.\\n    D is the day designator that follows the value for the number of days.\\n    T is the time designator that precedes the time components of the representation.\\n    H is the hour designator that follows the value for the number of hours.\\n    M is the minute designator that follows the value for the number of minutes.\\n    S is the second designator that follows the value for the number of seconds.\\n\\n    Note the time designator, T, that precedes the time value.\\n\\n    Matches moment.js, Luxon and DateFns implementations\\n    ,/. is valid for decimal places and +/- is a valid prefix\\n  "
scalar Duration

"""
A local date string (i.e., with no associated timezone) in \`YYYY-MM-DD\` format, e.g. \`2020-01-01\`.
"""
scalar LocalDate

"""The locale in the format of a BCP 47 (RFC 5646) standard string"""
scalar Locale

"""
A local time string (i.e., with no associated timezone) in 24-hr \`HH:mm[:ss[.SSS]]\` format, e.g. \`14:25\` or \`14:25:06\` or \`14:25:06.123\`.
"""
scalar LocalTime

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#streamid")

"""
A time string at UTC, such as 10:15:30Z, compliant with the \`full-time\` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
A field whose value exists in the standard IANA Time Zone Database: https://www.iana.org/time-zones
"""
scalar TimeZone

"""
A field whose value conforms to the standard Uniform Resource Identifier (URI) format as specified in RFC3986.
"""
scalar URI @specifiedBy(url: "https://www.ietf.org/rfc/rfc3986.txt")

"""
A field whose value is a UTC Offset: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
"""
scalar UtcOffset

input ExtraScalarsFiltersInput {
  where: ExtraScalarsObjectFilterInput
  and: [ExtraScalarsFiltersInput!]
  or: [ExtraScalarsFiltersInput!]
  not: ExtraScalarsFiltersInput
}

input ExtraScalarsObjectFilterInput {
  dateTime: StringValueFilterInput
  streamID: StringValueFilterInput
}

input StringValueFilterInput {
  isNull: Boolean
  equalTo: String
  notEqualTo: String
  in: [String!]
  notIn: [String!]
  lessThan: String
  lessThanOrEqualTo: String
  greaterThan: String
  greaterThanOrEqualTo: String
}

input ExtraScalarsSortingInput {
  dateTime: SortOrder
  streamID: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

type Mutation {
  createExtraScalars(input: CreateExtraScalarsInput!): CreateExtraScalarsPayload
  updateExtraScalars(input: UpdateExtraScalarsInput!): UpdateExtraScalarsPayload
}

type CreateExtraScalarsPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: ExtraScalars!
  clientMutationId: String
}

input CreateExtraScalarsInput {
  content: ExtraScalarsInput!
  clientMutationId: String
}

input ExtraScalarsInput {
  accountID: ChainAgnosticAccountID
  chainID: ChainAgnosticChainID
  cid: InterPlanetaryCID
  commitID: CeramicCommitID
  countryCode: CountryCode
  date: Date
  dateTime: DateTime
  did: DID
  duration: Duration
  latitude: Float
  localDate: LocalDate
  locale: Locale
  localTime: LocalTime
  longitude: Float
  streamID: CeramicStreamID
  time: Time
  timeZone: TimeZone
  uri: URI
  utcOffset: UtcOffset
}

"""
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
"""
scalar DID @specifiedBy(url: "https://www.w3.org/TR/did-core/")

type UpdateExtraScalarsPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: ExtraScalars!
  clientMutationId: String
}

input UpdateExtraScalarsInput {
  id: ID!
  content: PartialExtraScalarsInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialExtraScalarsInput {
  accountID: ChainAgnosticAccountID
  chainID: ChainAgnosticChainID
  cid: InterPlanetaryCID
  commitID: CeramicCommitID
  countryCode: CountryCode
  date: Date
  dateTime: DateTime
  did: DID
  duration: Duration
  latitude: Float
  localDate: LocalDate
  locale: Locale
  localTime: LocalTime
  longitude: Float
  streamID: CeramicStreamID
  time: Time
  timeZone: TimeZone
  uri: URI
  utcOffset: UtcOffset
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}"
`;
