// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runtime can create a document using extra scalars 1`] = `
{
  "accountID": "eip155:1:0xabcdef",
  "chainID": "eip155:1",
  "cid": "bagcqcerakszw2vsovxznyp5gfnpdj4cqm2xiv76yd24wkjewhhykovorwo6a",
  "commitID": "k1dpgaqe3i64kjqcp801r3sn7ysi5i0k7nxvs7j351s7kewfzr3l7mdxnj7szwo4kr9mn2qki5nnj0cv836ythy1t1gya9s25cn1nexst3jxi5o3h6qprfyju",
  "countryCode": "US",
  "date": "2023-01-31",
  "dateTime": "2023-01-31T16:04:16.475Z",
  "did": {
    "id": "did:test:123",
  },
  "latitude": 53.471,
  "localDate": "2023-01-31",
  "localTime": "14:25:06.123",
  "locale": "en-gb",
  "longitude": 53.471,
  "streamID": "kjzl6cwe1jw147dvq16zluojmraqvwdmbh61dx9e0c59i344lcrsgqfohexp60s",
  "time": "14:10:20+01:00",
  "timeZone": null,
  "uri": "https://ceramic.network",
  "utcOffset": "+01:15",
}
`;

exports[`runtime create a document with enum 1`] = `
{
  "status": "DEFAULT",
  "text": "Test node contents",
  "title": "A test note",
}
`;

exports[`runtime create and query post with comments 1`] = `
"type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  commentIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CommentConnection
  postIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  commentList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CommentConnection
  postList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

type Comment implements Node {
  id: ID!
  text: String!
  postID: CeramicStreamID!
  post: Post

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
}

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#streamid")

type Post implements Node {
  id: ID!
  date: DateTime
  text: String!
  title: String!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
  commentsCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  comments(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): CommentConnection!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#commitid")

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createComment(input: CreateCommentInput!): CreateCommentPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  createPost(input: CreatePostInput!): CreatePostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
}

type CreateCommentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Comment!
  clientMutationId: String
}

input CreateCommentInput {
  content: CommentInput!
  clientMutationId: String
}

input CommentInput {
  text: String!
  postID: CeramicStreamID!
}

type UpdateCommentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Comment!
  clientMutationId: String
}

input UpdateCommentInput {
  id: ID!
  content: PartialCommentInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialCommentInput {
  text: String
  postID: CeramicStreamID
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

type CreatePostPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input CreatePostInput {
  content: PostInput!
  clientMutationId: String
}

input PostInput {
  date: DateTime
  text: String!
  title: String!
}

type UpdatePostPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input UpdatePostInput {
  id: ID!
  content: PartialPostInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialPostInput {
  date: DateTime
  text: String
  title: String
}"
`;

exports[`runtime create and query post with comments 2`] = `
{
  "data": {
    "viewer": {
      "postList": {
        "edges": [
          {
            "node": {
              "comments": {
                "edges": [],
              },
              "commentsCount": 0,
              "text": "First post content",
              "title": "A first post",
            },
          },
          {
            "node": {
              "comments": {
                "edges": [
                  {
                    "node": {
                      "text": "A first comment",
                    },
                  },
                  {
                    "node": {
                      "text": "A second comment",
                    },
                  },
                  {
                    "node": {
                      "text": "A third comment",
                    },
                  },
                ],
              },
              "commentsCount": 3,
              "text": "Second post content",
              "title": "A second post",
            },
          },
        ],
      },
    },
  },
}
`;
