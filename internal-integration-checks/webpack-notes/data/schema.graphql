type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  noteIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): NoteConnection
  profileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ProfileConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  noteList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): NoteConnection
  profile: Profile
}

"""A connection to a list of items."""
type NoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge"""
  node: Note

  """A cursor for use in pagination"""
  cursor: String!
}

type Note implements Node {
  id: ID!
  text: String!
  title: String!
  status: NoteStatus

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
}

enum NoteStatus {
  DEFAULT
  IMPORTANT
  ARCHIVE
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID

type Profile implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge"""
  node: Profile

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createNote(input: CreateNoteInput!): CreateNotePayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
  createProfile(input: CreateProfileInput!): CreateProfilePayload
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
}

type CreateNotePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Note!
  clientMutationId: String
}

input CreateNoteInput {
  content: NoteInput!
  clientMutationId: String
}

input NoteInput {
  text: String!
  title: String!
  status: NoteStatus
}

type UpdateNotePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Note!
  clientMutationId: String
}

input UpdateNoteInput {
  id: ID!
  content: PartialNoteInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialNoteInput {
  text: String
  title: String
  status: NoteStatus
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

type CreateProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Profile!
  clientMutationId: String
}

input CreateProfileInput {
  content: ProfileInput!
  clientMutationId: String
}

input ProfileInput {
  name: String!
}

type UpdateProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Profile!
  clientMutationId: String
}

input UpdateProfileInput {
  id: ID!
  content: PartialProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialProfileInput {
  name: String
}