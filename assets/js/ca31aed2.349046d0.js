"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5971],{4852:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(9231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,g=d["".concat(c,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6734:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(328),r=(n(9231),n(4852));const i={},s="Schema definition",o={unversionedId:"guides/creating-composites/schema",id:"version-0.3.x/guides/creating-composites/schema",title:"Schema definition",description:"Composite schemas are based on GraphQL's Schema Definition Language, using a subset of functionalities offered by GraphQL to describe models used by ComposeDB.",source:"@site/versioned_docs/version-0.3.x/guides/creating-composites/schema.md",sourceDirName:"guides/creating-composites",slug:"/guides/creating-composites/schema",permalink:"/docs/0.3.x/guides/creating-composites/schema",draft:!1,tags:[],version:"0.3.x",frontMatter:{},sidebar:"docs",previous:{title:"Creating Composites",permalink:"/docs/0.3.x/guides/creating-composites/overview"},next:{title:"Supported scalars",permalink:"/docs/0.3.x/guides/creating-composites/scalars"}},c={},l=[{value:"Schema Definition Language",id:"schema-definition-language",level:2},{value:"Scalars",id:"scalars",level:2},{value:"Shapes and lists",id:"shapes-and-lists",level:2},{value:"Directives",id:"directives",level:2}],p={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"schema-definition"},"Schema definition"),(0,r.kt)("p",null,"Composite schemas are based on ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/"},"GraphQL's Schema Definition Language"),", using a subset of functionalities offered by GraphQL to describe models used by ComposeDB."),(0,r.kt)("h2",{id:"schema-definition-language"},"Schema Definition Language"),(0,r.kt)("p",null,"The Schema Definition Language (SDL) allows to represent ",(0,r.kt)("a",{parentName:"p",href:"#scalars"},"scalars")," (values), ",(0,r.kt)("a",{parentName:"p",href:"#shapes-and-lists"},"shapes")," (key-value mappings) and ",(0,r.kt)("a",{parentName:"p",href:"#shapes-and-lists"},"lists")," to describe the models structure, as well as validation and other metadata information using ",(0,r.kt)("a",{parentName:"p",href:"#directives"},"directives"),"."),(0,r.kt)("p",null,"An example composite schema can look like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type Profile @createModel(accountRelation: SINGLE, description: "Very basic profile") {\n  displayName: String! @string(minLength: 3, maxLength: 50)\n}\n\ntype Note @createModel(accountRelation: LIST, description: "Very basic note") {\n  author: DID! @documentAccount\n  version: CommitID! @documentVersion\n  title: String! @string(minLength: 10, maxLength: 100)\n  text: String @string(maxLength: 2000)\n}\n')),(0,r.kt)("h2",{id:"scalars"},"Scalars"),(0,r.kt)("p",null,"Scalars represent the type of a single value in the schema, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," for UTF-8 character sequences, or ",(0,r.kt)("inlineCode",{parentName:"p"},"Int")," for signed 32-bit integers."),(0,r.kt)("p",null,"When scalars are followed by a ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," in the schema, it means providing a value is required, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type SomeShape {\n  requiredInt: Int!\n  optionalString: String\n}\n")),(0,r.kt)("p",null,"Scalars can be followed by ",(0,r.kt)("a",{parentName:"p",href:"#directives"},"directives")," providing additional information about the value, such as validation rules."),(0,r.kt)("p",null,"Scalars supported by ComposeDB are described in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.3.x/guides/creating-composites/scalars"},"scalars page of the documentation"),"."),(0,r.kt)("h2",{id:"shapes-and-lists"},"Shapes and lists"),(0,r.kt)("p",null,"Scalars and shapes can be composed together in lists and other shapes, such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageMetadata")," shape embedded in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageSources")," shape in the following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type ImageMetadata {\n  src: String! @string(maxLength: 150)\n  mimeType: String! @string(maxLength: 50)\n  width: Int! @int(min: 1)\n  height: Int! @int(min: 1)\n  size: Int @int(min: 1)\n}\n\ntype ImageSources {\n  original: ImageMetadata!\n  alternatives: [ImageMetadata] @list(maxLength: 20)\n}\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.3.x/guides/creating-composites/directives#list"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"@list")," directive")," ",(0,r.kt)("strong",{parentName:"p"},"must be used")," along with lists to define the ",(0,r.kt)("inlineCode",{parentName:"p"},"maxLength")," of the list.")),(0,r.kt)("h2",{id:"directives"},"Directives"),(0,r.kt)("p",null,"Directives are known keywords preceded by the character ",(0,r.kt)("inlineCode",{parentName:"p"},"@"),", for example ",(0,r.kt)("inlineCode",{parentName:"p"},"@string")," to provide validation rules about a ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type SomeShape {\n  someString: String! @string(minLength: 10, maxLength: 30)\n}\n")),(0,r.kt)("p",null,"Directives supported by ComposeDB are described in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.3.x/guides/creating-composites/directives"},"directives page of the documentation"),"."))}m.isMDXComponent=!0}}]);