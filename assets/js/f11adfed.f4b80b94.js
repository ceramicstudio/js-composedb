"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9816],{4852:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(9231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(5675),o=(n(9231),n(4852));const r={},s="Running in the Cloud",i={unversionedId:"guides/composedb-server/running-in-the-cloud",id:"version-0.4.x/guides/composedb-server/running-in-the-cloud",title:"Running in the Cloud",description:"Run a ComposeDB server in the cloud",source:"@site/versioned_docs/version-0.4.x/guides/composedb-server/running-in-the-cloud.mdx",sourceDirName:"guides/composedb-server",slug:"/guides/composedb-server/running-in-the-cloud",permalink:"/docs/0.4.x/guides/composedb-server/running-in-the-cloud",draft:!1,tags:[],version:"0.4.x",frontMatter:{},sidebar:"guides",previous:{title:"Running Locally",permalink:"/docs/0.4.x/guides/composedb-server/running-locally"},next:{title:"Server Configurations",permalink:"/docs/0.4.x/guides/composedb-server/server-configurations"}},l={},c=[{value:"Things to Know",id:"things-to-know",level:2},{value:"Cloud Requirements",id:"cloud-requirements",level:2},{value:"Running ComposeDB server on Kubernetes",id:"running-composedb-server-on-kubernetes",level:2},{value:"Running ComposeDB server on DigitalOcean Kubernetes",id:"running-composedb-server-on-digitalocean-kubernetes",level:3},{value:"Creating a Kubernetes Cluster",id:"creating-a-kubernetes-cluster",level:3},{value:"Connecting to Kubernetes cluster",id:"connecting-to-kubernetes-cluster",level:3},{value:"Deploy a Ceramic with ComposeDB Server",id:"deploy-a-ceramic-with-composedb-server",level:3},{value:"Access the Ceramic with ComposeDB API",id:"access-the-ceramic-with-composedb-api",level:3},{value:"Expose the node endpoint to the internet",id:"expose-the-node-endpoint-to-the-internet",level:3},{value:"Utilize the Deployed Assets with ComposeDB CLI and Graphiql Server",id:"utilize-the-deployed-assets-with-composedb-cli-and-graphiql-server",level:3},{value:"Commonly asked questions",id:"commonly-asked-questions",level:2},{value:"Where is my data stored?",id:"where-is-my-data-stored",level:3},{value:"What is my admin DID and how do I use it to connect?",id:"what-is-my-admin-did-and-how-do-i-use-it-to-connect",level:3},{value:"How do I connect to the Postgres database?",id:"how-do-i-connect-to-the-postgres-database",level:3},{value:"How do I shut it all down?",id:"how-do-i-shut-it-all-down",level:3},{value:"Docker Hub",id:"docker-hub",level:2},{value:"Running IPFS",id:"running-ipfs",level:3},{value:"Running Postgres",id:"running-postgres",level:3},{value:"Running Ceramic",id:"running-ceramic",level:3},{value:"Editing the <code>daemon.config.json</code> file",id:"editing-the-daemonconfigjson-file",level:3},{value:"Next Steps",id:"next-steps",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-in-the-cloud"},"Running in the Cloud"),(0,o.kt)("p",null,"Run a ComposeDB server in the cloud"),(0,o.kt)("h2",{id:"things-to-know"},"Things to Know"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This guide is focused on running in the cloud using Docker and Kubernetes. For local deployment instructions check out ",(0,o.kt)("a",{parentName:"li",href:"/docs/0.4.x/guides/composedb-server/running-locally"},"Running Locally"),"."),(0,o.kt)("li",{parentName:"ul"},"ComposeDB Server requires running a Ceramic node (which uses IPFS) for decentralized data, ",(0,o.kt)("a",{parentName:"li",href:"https://ipfs.tech/"},"IPFS"),", and a Postgres DB. Each of these components should be running within a separate Docker container."),(0,o.kt)("li",{parentName:"ul"},"Docker images for\xa0IPFS are built from the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ceramicnetwork/go-ipfs-daemon"},(0,o.kt)("inlineCode",{parentName:"a"},"go-ipfs-daemon"))," repository and come pre-configured with plugins that make it easy to run IPFS on cloud infrastructure (e.g. the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ipfs/go-ds-s3"},"S3 plugin"),"). Images built from the ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," branch are tagged with\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"latest"),", and\xa0the git commit hash of the code from which the image was built."),(0,o.kt)("li",{parentName:"ul"},"Docker images to run ComposeDB Server are built from the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ceramicnetwork/js-ceramic"},"js-ceramic")," repository. Images built from the ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," branch are tagged with\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"latest"),", the git commit hash of the code from which the image was built, and the npm package version of the corresponding ",(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@ceramicnetwork/cli"},(0,o.kt)("inlineCode",{parentName:"a"},"@ceramicnetwork/cli"))," release.")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"To run a Ceramic node in production, it is critical to persist the ",(0,o.kt)("a",{parentName:"p",href:"https://developers.ceramic.network/run/nodes/nodes/#ceramic-state-store"},"Ceramic state store"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ipfs/go-ipfs/blob/master/docs/config.md#datastorespec"},"IPFS datastore")," as well as Posgres database. The form of storage you choose should also be configured for an emergency recovery with data redundancy, and some form of snapshotting and/or backups. ",(0,o.kt)("strong",{parentName:"p"},"Loss of this data can result in permanent loss of Ceramic streams and will cause your node to be in a corrupt state."))),(0,o.kt)("h2",{id:"cloud-requirements"},"Cloud Requirements"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported Operating Systems")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Linux"),(0,o.kt)("li",{parentName:"ul"},"Mac"),(0,o.kt)("li",{parentName:"ul"},"Windows")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"For Windows, Windows Subsystem for Linux 2 (WSL2) is strongly recommended. Using the Windows command line is not portable and can cause compatibility issue when running the same configuration on a different operating system (e.g. in a Linux-based cloud deployment).")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Compute requirements")),(0,o.kt)("p",null,"You\u2019ll need sufficient compute resources to power Ceramic, IPFS, and Postgres. Below are the recommended requirements:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"4 vCPUs"),(0,o.kt)("li",{parentName:"ul"},"8GB RAM")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you are just getting started with a brand new project, you can start with a much smaller instance. For example, to follow this guide, you can start with a 1GB RAM and 1vCPU cluster and scale your instance afterwards.")),(0,o.kt)("h2",{id:"running-composedb-server-on-kubernetes"},"Running ComposeDB server on Kubernetes"),(0,o.kt)("p",null,"You can run ComposeDB Server on Kubernetes on the cloud, such as ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/kubernetes-engine"},"Google Kubernetes Engine")," or ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/eks/"},"Amazon Elastic Kubernetes Service"),".\nYou can also run ComposeDB Server on ",(0,o.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/products/kubernetes/"},"DigitalOcean Kubernetes"),"."),(0,o.kt)("p",null,"Running Kubernetes on the Cloud means a provider will manage the underlying infrastructure for you. You can also run Kubernetes on your own infrastructure, but that is outside the scope of this guide."),(0,o.kt)("h3",{id:"running-composedb-server-on-digitalocean-kubernetes"},"Running ComposeDB server on DigitalOcean Kubernetes"),(0,o.kt)("p",null,"DigitalOcean Kubernetes (DOKS) allows developers to deploy Kubernetes clusters using simple managed service. ComposeDB deployment on DigitalOcean Kubernetes will require 2 tools:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tools"},"kubectl")," - the Kubernetes command line tool"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.digitalocean.com/reference/doctl/how-to/install/"},"doctl")," - the DigitalOcean command line tool")),(0,o.kt)("p",null,"Make sure you have these tools installed on your machine before proceeding to the next step of this guide."),(0,o.kt)("h3",{id:"creating-a-kubernetes-cluster"},"Creating a Kubernetes Cluster"),(0,o.kt)("p",null,"First, you will have to create your DigitalOcean Kubernetes cluster. To do that, follow an ",(0,o.kt)("a",{parentName:"p",href:"https://docs.digitalocean.com/products/kubernetes/how-to/create-clusters/"},"official DigitalOcean tutorial"),". The process of setting up your Kubernetes cluster will take about 10 minutes.\nOnce it\u2019s up and running, you are good to continue with the next step."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"When it comes to choosing your cluster capacity, we recommend starting with the most cost-effective option - starting with the smallest cluster size and upgrading later. For example, to follow this guide you can start with a 1GB RAM and 1vCPU cluster. Also, keep in mind that\nDigital Ocean offers free credits for the new users to start building their projects.")),(0,o.kt)("h3",{id:"connecting-to-kubernetes-cluster"},"Connecting to Kubernetes cluster"),(0,o.kt)("p",null,"First, you will have to configure the authentication of your cluster and retrieve the credentials. This can be achieved using the\xa0doctl\xa0command  below and substituting the authentication number provided\nto you by Digital Ocean right after your cluster is launched:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"doctl kubernetes cluster kubeconfig save 362dda8b-b555-4c47-9bf0-1a81cf58e0a8\n")),(0,o.kt)("p",null,"After authenticating your cluster, it\u2019s a good idea to verify the connectivity. This can be achieved using the following command which should list your cluster name, user and namespace:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl config get-contexts\n")),(0,o.kt)("h3",{id:"deploy-a-ceramic-with-composedb-server"},"Deploy a Ceramic with ComposeDB Server"),(0,o.kt)("p",null,"In this section we will focus on deploying the Ceramic with ComposeDB Server on the DigitalOcean Kubernetes cluster."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Clone the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ceramicstudio/ceramic-infra-scripts.git"},"ceramic-infra-scripts repo")," and enter the created directory.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git clone https://github.com/ceramicstudio/ceramic-infra-scripts.git\ncd ceramic-infra-scripts\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Run the following commands to deploy the stack:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Create a namespace for the deployment\nkubectl create namespace ceramic\n\n# Create the necessary secrets\n./k8s/base/composedb/create-secrets.sh\n\n# Apply the deployment\nkubectl apply -k k8s/base/composedb/\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"It will take a few minutes for the deployment to pull the docker images and start the containers. You can watch the process with the following command:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods --watch --namespace ceramic\n")),(0,o.kt)("p",null,"You will know that your deployment is up and running when all of the processes have a status ",(0,o.kt)("inlineCode",{parentName:"p"},"Running")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"NAME          READY   STATUS    RESTARTS   AGE\ncomposedb-0   0/1     Running   0          77s\nipfs-0        1/1     Running   0          77s\npostgres-0    1/1     Running   0          77s\n")),(0,o.kt)("p",null,"Hit ",(0,o.kt)("inlineCode",{parentName:"p"},"^C")," on your keyboard to exit this view."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can easily access the logs of each of the containers by using the command below and configuring the container name. For example, to access the Ceramic node logs, you can run:"),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"kubectl logs --follow --namespace ceramic composedb-0"))),(0,o.kt)("h3",{id:"access-the-ceramic-with-composedb-api"},"Access the Ceramic with ComposeDB API"),(0,o.kt)("p",null,"You can use local port forwarding to access the Ceramic node from your local machine. Open a new terminal and run the command below. The port forward will stop when the command is exited\nso make sure to keep this command running for the rest of this guide."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl port-forward --namespace ceramic composedb-0 7007:7007\n")),(0,o.kt)("p",null,"Once you run the command you should see the following output in your terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Forwarding from 127.0.0.1:7007 -> 7007\nForwarding from [::1]:7007 -> 7007\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The Ceramic node must be ready to accept connections before you can access it.\nThe pod's state must be ",(0,o.kt)("inlineCode",{parentName:"p"},"Running")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"READY")," column must be ",(0,o.kt)("inlineCode",{parentName:"p"},"1/1"),".\nYou can check the status of the node by running the command below:"),(0,o.kt)("p",{parentName:"admonition"},"$ kubectl get pods composedb-0\nNAME          READY   STATUS    RESTARTS      AGE\ncomposedb-0   1/1     Running   1 (28h ago)   28h")),(0,o.kt)("p",null,"To check the connection, open a new terminal and run the command below. A successful connection should utter a response ",(0,o.kt)("inlineCode",{parentName:"p"},"Alive!")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:7007/api/v0/node/healthcheck\n")),(0,o.kt)("p",null,"Expected output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Alive!\n")),(0,o.kt)("h3",{id:"expose-the-node-endpoint-to-the-internet"},"Expose the node endpoint to the internet"),(0,o.kt)("p",null,"The last step is to expose your Ceramic node to the internet so that it\u2019s accessible for your application. This can be done using a DigitalOcean Load Balancer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f k8s/base/composedb/do-lb.yaml\n")),(0,o.kt)("p",null,"You can get the EXTERNAL IP address of the load balancer with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get svc --namespace ceramic composedb-lb\n")),(0,o.kt)("p",null,"The result of this command will be an output similar to the one below. Keep in mind that might take a few minutes for the EXTERMAL-IP to be configured and change the status from ",(0,o.kt)("inlineCode",{parentName:"p"},"<pending>"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"NAME           TYPE           CLUSTER-IP      EXTERNAL-IP       PORT(S)          AGE\ncomposedb-lb   LoadBalancer   10.245.10.130   174.138.109.159   7007:31284/TCP   4m4s\n")),(0,o.kt)("p",null,"This external IP address can now be used for accessing your node. To test it out, copy the external IP address provided above and substitute it in the following health check command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://174.138.109.159:7007/api/v0/node/healthcheck\n")),(0,o.kt)("p",null,"Once again, a successful connection will provide an output ",(0,o.kt)("inlineCode",{parentName:"p"},"Alive!"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Alive!\n")),(0,o.kt)("h3",{id:"utilize-the-deployed-assets-with-composedb-cli-and-graphiql-server"},"Utilize the Deployed Assets with ComposeDB CLI and Graphiql Server"),(0,o.kt)("p",null,"Now that you have a Ceramic with ComposeDB server deployed, you can utilize the ",(0,o.kt)("a",{parentName:"p",href:"/docs/0.4.x/set-up-your-environment#composedb"},"ComposeDB Cli")," to create models and\ncomposites, as well as standing up a Graphiql server backed by the Ceramic with ComposeDB server."),(0,o.kt)("p",null,"First you will need to install ",(0,o.kt)("a",{parentName:"p",href:"/docs/0.4.x/set-up-your-environment#composedb"},"ComposeDB Cli"),". Next you will need to setup,\nyour environment to properly talk to your server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'export CERAMIC_URL="http://"$(kubectl get service composedb-lb --namespace ceramic -o json | jq -r \'.status.loadBalancer.ingress[0].ip\')":7007"\nexport DID_PRIVATE_KEY=$(kubectl get secrets --namespace ceramic ceramic-admin -o json | jq -r \'.data."private-key"\' | base64 -d)\n')),(0,o.kt)("p",null,"You can now follow the existing guides, omitting adding ",(0,o.kt)("inlineCode",{parentName:"p"},"--ceramic-url")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"--did-private-key")," to your composdb calls. For\nexample"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"composedb composite:from-model kjzl6hvfrbw6c5ajfmes842lu09vjxu5956e3xq0xk12gp2jcf9s90cagt2god9 --output=my-first-composite-single.json\n")),(0,o.kt)("p",null,"will create a new composite, utilizing your remote Ceramic with ComposeDB server. You can also run Graphiql locally"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"composedb graphql:server --graphiql runtime-composite.json --port=5005\n")),(0,o.kt)("p",null,"You can access the graphiql server at ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:5005/graphql"},"http://localhost:5005/graphql")),(0,o.kt)("h2",{id:"commonly-asked-questions"},"Commonly asked questions"),(0,o.kt)("h3",{id:"where-is-my-data-stored"},"Where is my data stored?"),(0,o.kt)("p",null,"Each part of the stack (js-ceramic, ipfs, postgres) has its own ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/storage/persistent-volumes/"},"Persistent Volume"),".\nYou can view the volumes with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get PersistentVolumeClaim --namespace ceramic\n")),(0,o.kt)("p",null,"This output includes identifiers for the volume on the cloud provider as well as the size and storage class, which defines the properties of the volume."),(0,o.kt)("h3",{id:"what-is-my-admin-did-and-how-do-i-use-it-to-connect"},"What is my admin DID and how do I use it to connect?"),(0,o.kt)("p",null,"The ceramic node is configured with an admin DID. This DID is used to authenticate with the ceramic node. The DID is derived from a seed, which is stored in a kubernetes secret named ceramic-admin and the private-key key's value is the base64 encoded seed."),(0,o.kt)("p",null,"While the example deployment creates a random seed for the admin DID, you can use your own seed by creating a secret with the same name and key instead of using the create-secrets.sh script."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ kubectl create secret generic ceramic-admin --from-literal=private-key=<YOUR SEED>\n")),(0,o.kt)("p",null,"To view the currently configured admin DID seed, you can use the following command (requires jq):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl get secrets --namespace ceramic ceramic-admin -o json | jq -r '.data.\"private-key\"' | base64 -d\n")),(0,o.kt)("h3",{id:"how-do-i-connect-to-the-postgres-database"},"How do I connect to the Postgres database?"),(0,o.kt)("p",null,"You can create a session to the postgres database with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl exec --namespace ceramic -ti postgres-0 -- psql -U ceramic\n")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres")," service is also created and can be exposed locally with port-forwarding:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl port-forward --namespace ceramic svc/postgres 5432\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ceramic")," user password randomly generated during deployment.\nIt is also available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres-auth")," secret:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --namespace ceramic get secrets postgres-auth -o yaml\n")),(0,o.kt)("p",null,"Here you should get the following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"apiVersion: v1\ndata:\n  password: NzNjNzQ4ZDkxM2Y5NGQ2MmQwOTRiYzQ2YzIzMmM4YzdlYzFhODA2MA==\n  username: Y2VyYW1pYw==\nkind: Secret\n...\n")),(0,o.kt)("h3",{id:"how-do-i-shut-it-all-down"},"How do I shut it all down?"),(0,o.kt)("p",null,"To remove the workload from the cluster, you can delete the namespace. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace ceramic\n")),(0,o.kt)("h2",{id:"docker-hub"},"Docker Hub"),(0,o.kt)("p",null,"You can find the ComposeDB server and IPFS Docker images on ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/u/ceramicnetwork"},"Docker Hub"),".\nBelow, you can find examples of how you can run IPFS, Postgres and Ceramic processes using Docker."),(0,o.kt)("h3",{id:"running-ipfs"},"Running IPFS"),(0,o.kt)("p",null,'For production deployments you should run your own IPFS process manually and point your Ceramic node at it. This is referred to as running IPFS in "remote" mode in the Ceramic ',(0,o.kt)("inlineCode",{parentName:"p"},"daemon.config.json")," file, versus the pre-configured \u201cbundled\u201d mode used for running locally."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull ceramicnetwork/go-ipfs-daemon:latest\n\ndocker run \\\n  -p 5001:5001 \\ # API port\n  -p 8011:8011 \\ # Healthcheck port\n  -v /path_on_volume_for_ipfs_repo:/data/ipfs \\\n  --name ipfs \\\n  go-ipfs-daemon\n")),(0,o.kt)("h3",{id:"running-postgres"},"Running Postgres"),(0,o.kt)("p",null,"An example below demonstrates how you can run a Postgres process. Make sure to update the variables to fit your use case:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull postgres\n\ndocker run -d \\\n  -e POSTGRES_PASSWORD=mysecretpassword \\\n  -e PGDATA=/var/lib/postgresql/data/pgdata \\\n  -v /path_on_volume_for_postgres_data:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  --name postgres \\\n  postgres\n")),(0,o.kt)("p",null,"You can also follow the examples from the official Postgres Docker image ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/postgres"},"documentation"),"."),(0,o.kt)("h3",{id:"running-ceramic"},"Running Ceramic"),(0,o.kt)("p",null,"An example below demonstrates how you can run a Ceramic server using Docker. Make sure to update the variables to fit your use case:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull ceramicnetwork/js-ceramic:latest\n\ndocker run -d \\\n  -p 7007:7007 \\\n  -v /path_on_volume_for_daemon_config:/root/.ceramic/daemon.config.json \\\n  -v /path_on_volume_for_ceramic_logs:/root/.ceramic/logs \\\n  -v /path_on_volume_for_ceramic_statestore:/root/.ceramic/statestore \\\n  -e NODE_ENV=production \\\n  -e CERAMIC_INDEXING_DB_URI=postgres://username:password@host:5432/dbname \\\n  --name ceramic \\\n  js-ceramic --ipfs-api http://ipfs_ip_address:5001\n")),(0,o.kt)("h3",{id:"editing-the-daemonconfigjson-file"},"Editing the ",(0,o.kt)("inlineCode",{parentName:"h3"},"daemon.config.json")," file"),(0,o.kt)("p",null,"To have these IPFS and Postgres settings persist in your Ceramic node, edit the ",(0,o.kt)("inlineCode",{parentName:"p"},"daemon.config.json")," file to include IPFS information. The default location is ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.ceramic/daemon.config.json"),". For a full file example, see the ",(0,o.kt)("a",{parentName:"p",href:"https://developers.ceramic.network/run/nodes/nodes/#example-daemonconfigjson"},"Ceramic")," docs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'...\n    "ipfs": {\n        "mode": "remote",\n        "host": "http://ipfs_ip_address:5001"\n    },\n...\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'...\n"indexing": {\n    "db": "postgres://username:password@host:5432/dbname",\n    "allow-queries-before-historical-sync": true,\n    "enable-historical-sync": false\n  }\n...\n')),(0,o.kt)("h2",{id:"next-steps"},"Next Steps"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Understand the different ways to ",(0,o.kt)("a",{parentName:"li",href:"/docs/0.4.x/guides/composedb-server/server-configurations"},"configure your server"),", including choosing a network"),(0,o.kt)("li",{parentName:"ul"},"Use your Admin DID to authenticate your node to gain ",(0,o.kt)("a",{parentName:"li",href:"/docs/0.4.x/guides/composedb-server/access-mainnet"},"access to mainnet"))))}d.isMDXComponent=!0}}]);