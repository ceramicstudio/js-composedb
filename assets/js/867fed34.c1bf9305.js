"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9978],{54852:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var a=t(49231);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,g=c["".concat(d,".").concat(m)]||c[m]||u[m]||l;return t?a.createElement(g,o(o({ref:n},s),{},{components:t})):a.createElement(g,o({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},53793:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=t(35664),r=(t(49231),t(54852));const l={},o="Example: Container of Items",i={unversionedId:"guides/data-modeling/relations-container-of-items",id:"version-0.5.x/guides/data-modeling/relations-container-of-items",title:"Example: Container of Items",description:"Creating the Models",source:"@site/versioned_docs/version-0.5.x/guides/data-modeling/relations-container-of-items.mdx",sourceDirName:"guides/data-modeling",slug:"/guides/data-modeling/relations-container-of-items",permalink:"/docs/0.5.x/guides/data-modeling/relations-container-of-items",draft:!1,tags:[],version:"0.5.x",frontMatter:{}},d={},p=[{value:"Creating the Models",id:"creating-the-models",level:2},{value:"Inserting Data",id:"inserting-data",level:2},{value:"Query The Data",id:"query-the-data",level:2}],s={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"example-container-of-items"},"Example: Container of Items"),(0,r.kt)("h2",{id:"creating-the-models"},"Creating the Models"),(0,r.kt)("p",null,"First, create the SDL for your item"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type Ball @createModel(accountRelation: LIST, description: "A ball to display") {\n  creator: DID! @accountReference\n  red: Int\n  green: Int\n  blue: Int\n  radius: Float\n}\n')),(0,r.kt)("p",null,"You will then save this to a file, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"ball.graphql"),". You can then add the model and get the id."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," composedb composite:create --output ball.json ball.graphql\n cat ball.json | jq '.models | keys_unsorted[0]'\n")),(0,r.kt)("p",null,"Next, create the SDL for your container, without references to items"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type World @createModel(accountRelation: LIST, description: "Ball World") {\n  name: String! @string(minLength: 3, maxLength: 50)\n}\n')),(0,r.kt)("p",null,"Save this to a file and add as above. Then we will create a model to relate our item and container"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type Ball @loadModel(id: "<id of ball>") {\n  id: ID!\n}\n\ntype World @loadModel(id: "<id of world>"){\n  id: ID!\n}\n\ntype BallRelation @createModel(accountRelation: LIST, description: "Relate a ball to our world") {\n  ballID: StreamID! @documentReference(model: "Ball")\n  ball: Ball! @relationDocument(property: "ballID")\n  worldID: StreamID! @documentReference(model: "World")\n  world: World! @relationDocument(property: "worldID")\n}\n')),(0,r.kt)("p",null,"For the relation, the ID will likely be the last model id. Finally, relate our container to our items"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type BallRelation @loadModel(id: "<id of ball relation>") {\n  id: ID!\n}\n\ntype World @loadModel(id: "<id of world>") {\n  balls: [BallRelation] @relationFrom(model: "BallRelation", property: "worldID")\n}\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This is a view on top of the models, so you cannot require your items, such as with ",(0,r.kt)("inlineCode",{parentName:"p"},"balls: [BallRelation!]"))),(0,r.kt)("p",null,"We can now merge all of these and deploy them as a composite."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"composedb composite:merge ball.json world.json ball_relation.json world_relation.json --output=merged.json\ncomposedb composite:deploy merged.json\ncomposedb composite:compile merged.json runtime.json\n")),(0,r.kt)("p",null,"Our composite is now ready to use. We can use it with graphiql"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"composedb graphql:server --graphiql runtime.json\n")),(0,r.kt)("h2",{id:"inserting-data"},"Inserting Data"),(0,r.kt)("p",null,"We can create an item with mutation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation CreateNewBall($i: CreateBallInput!){\n  createBall(input: $i){\n    document {\n      id\n      radius\n    }\n  }\n}\n")),(0,r.kt)("p",null,"and variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "i": {\n    "content": {\n      "creator": "<some did key>",\n      "radius": 45,\n      "red": 10,\n      "green": 20,\n      "blue": 30\n    }\n  }\n}\n')),(0,r.kt)("p",null,"We can create a container with mutation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation CreateNewWorld($i: CreateWorldInput!){\n  createWorld(input: $i){\n    document {\n      id\n    }\n  }\n}\n")),(0,r.kt)("p",null,"and variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "i": {\n    "content": {\n      "name": "test-world",\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Finally we can define relations between items and the container with mutation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation CreateBallRelation($i: CreateBallRelationInput!){\n  createBallRelation(input: $i){\n    document {\n      id\n    }\n  }\n}\n")),(0,r.kt)("p",null,"and variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "i": {\n    "content": {\n      "ballID": "<id from ball mutation>",\n      "worldID": "<id from world mutation>"\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"query-the-data"},"Query The Data"),(0,r.kt)("p",null,"We can query for the container for the items, and from that find the items."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  worldIndex(first: 1) {\n    edges {\n      node {\n        id\n        name\n        balls(first: 5) {\n          edges {\n            node {\n              id\n              ballID\n            }\n          }\n        }\n      }\n    }\n  }\n}\n")))}u.isMDXComponent=!0}}]);