"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4650],{54852:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(49231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||r;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8739:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(49231),a=n(19841);const r={tabItem:"tabItem_VWNn"};function i(e){let{children:t,hidden:n,className:i}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,i),hidden:n},t)}},68983:(e,t,n)=>{n.d(t,{Z:()=>w});var o=n(35664),a=n(49231),r=n(19841),i=n(45333),l=n(19409),s=n(87236),c=n(15016),u=n(22209);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const o=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=m(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:r}))),[s,c]=f({queryString:n,groupId:o}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,u.Nk)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),g=(()=>{const e=s??p;return d({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),h(e)}),[c,h,r]),tabValues:r}}var g=n(93097);const b={tabList:"tabList_MzTz",tabItem:"tabItem_Do7w"};function v(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),m=e=>{const t=e.currentTarget,n=u.indexOf(t),o=c[n].value;o!==l&&(p(t),s(o))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:m},i,{className:(0,r.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:o}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function y(e){const t=h(e);return a.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},a.createElement(v,(0,o.Z)({},e,t)),a.createElement(k,(0,o.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return a.createElement(y,(0,o.Z)({key:String(t)},e))}},39648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var o=n(35664),a=(n(49231),n(54852)),r=n(68983),i=n(8739);const l={},s="Your first composite",c={unversionedId:"first-composite",id:"version-0.2.x/first-composite",title:"Your first composite",description:"ComposeDB provides an abstraction on top of Ceramic streams by leveraging composites, an internal data structure referencing Ceramic model streams and associated metadata. Most of ComposeDB tools and clients interact with various representations of composites.",source:"@site/versioned_docs/version-0.2.x/first-composite.mdx",sourceDirName:".",slug:"/first-composite",permalink:"/docs/0.2.x/first-composite",draft:!1,tags:[],version:"0.2.x",frontMatter:{},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/0.2.x/installation"},next:{title:"Client setup",permalink:"/docs/0.2.x/client-setup"}},u={},p=[{value:"Running a local Ceramic node",id:"running-a-local-ceramic-node",level:2},{value:"Importing a model",id:"importing-a-model",level:2},{value:"Deploying to a local node",id:"deploying-to-a-local-node",level:2},{value:"Configuring Ceramic",id:"configuring-ceramic",level:2},{value:"Interacting using GraphiQL",id:"interacting-using-graphiql",level:2}],m={toc:p},d="wrapper";function f(e){let{components:t,...l}=e;return(0,a.kt)(d,(0,o.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"your-first-composite"},"Your first composite"),(0,a.kt)("head",null,(0,a.kt)("meta",{name:"robots",content:"noindex"}),(0,a.kt)("meta",{name:"googlebot",content:"noindex"})),(0,a.kt)("p",null,"ComposeDB provides an abstraction on top of Ceramic streams by leveraging composites, an internal data structure referencing Ceramic model streams and associated metadata. Most of ComposeDB tools and clients interact with various representations of composites."),(0,a.kt)("p",null,"This page presents how to create your first composite and deploy it to your local Ceramic node, in order to interact with documents on Ceramic."),(0,a.kt)("h2",{id:"running-a-local-ceramic-node"},"Running a local Ceramic node"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Because ComposeDB is still an experimental feature set built on top of Ceramic, if you want to use it with a Ceramic node, you need to set the ",(0,a.kt)("inlineCode",{parentName:"p"},"CERAMIC_ENABLE_EXPERIMENTAL_COMPOSE_DB")," environment variable to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", before running a node. Note that ComposeDB is not yet supported on Ceramic mainnet.")),(0,a.kt)("p",null,"The following steps require a local Ceramic node to be running. If you do not already have it running, you can use the following command:"),(0,a.kt)(r.Z,{defaultValue:"pnpm",groupId:"package-manager",values:[{label:"npm",value:"npm"},{label:"pnpm",value:"pnpm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npx @ceramicnetwork/cli daemon --network=testnet-clay\n"))),(0,a.kt)(i.Z,{value:"pnpm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"pnpm dlx @ceramicnetwork/cli daemon --network=testnet-clay\n"))),(0,a.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn dlx @ceramicnetwork/cli daemon --network=testnet-clay\n")))),(0,a.kt)("h2",{id:"importing-a-model"},"Importing a model"),(0,a.kt)("p",null,"Composites can be created by importing existing models. Here we're going to import a simple profile model with the stream ID ",(0,a.kt)("inlineCode",{parentName:"p"},"kjzl6hvfrbw6ca7nidsnrv78x7r4xt0xki71nvwe4j5a3s9wgou8yu3aj8cz38e"),", that exists on the Clay testnet."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Make sure your local Ceramic node is connected to the Clay testnet in order to load this model."),(0,a.kt)("p",{parentName:"admonition"},"If for some reason the model can't be loaded from the Clay testnet, you can ",(0,a.kt)("a",{target:"_blank",href:n(89939).Z},"download the composite file directly instead")," and store it in ",(0,a.kt)("inlineCode",{parentName:"p"},"my-first-composite.json")," file.")),(0,a.kt)(r.Z,{defaultValue:"api",groupId:"api-or-cli",values:[{label:"Using the CLI",value:"cli"},{label:"Using the API",value:"api"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"api",mdxType:"TabItem"},(0,a.kt)("p",null,"Make sure you have the ",(0,a.kt)("inlineCode",{parentName:"p"},"composedb")," packages ",(0,a.kt)("a",{parentName:"p",href:"/docs/0.2.x/installation"},"installed"),", before running the code below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Composite } from '@composedb/devtools'\nimport { writeEncodedComposite } from '@composedb/devtools-node'\n\nconst ceramic = new CeramicClient('http://localhost:7007')\nconst composite = await Composite.fromModels({\n  ceramic,\n  models: ['kjzl6hvfrbw6ca7nidsnrv78x7r4xt0xki71nvwe4j5a3s9wgou8yu3aj8cz38e'],\n})\n\nawait writeEncodedComposite(composite, 'my-first-composite.json')\n")),(0,a.kt)("p",null,"More details: ",(0,a.kt)("a",{parentName:"p",href:"/docs/0.2.x/api/classes/devtools.Composite#frommodels"},(0,a.kt)("inlineCode",{parentName:"a"},"Composite.fromModels")),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/0.2.x/api/modules/devtools_node#writeencodedcomposite"},(0,a.kt)("inlineCode",{parentName:"a"},"writeEncodedComposite")))),(0,a.kt)(i.Z,{value:"cli",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:from-model kjzl6hvfrbw6ca7nidsnrv78x7r4xt0xki71nvwe4j5a3s9wgou8yu3aj8cz38e --ceramic-url=http://localhost:7007 --output=my-first-composite.json\n")))),(0,a.kt)("h2",{id:"deploying-to-a-local-node"},"Deploying to a local node"),(0,a.kt)("p",null,"The composite can be deployed from a script or the CLI using the composite file:"),(0,a.kt)(r.Z,{defaultValue:"api",groupId:"api-or-cli",values:[{label:"Using the CLI",value:"cli"},{label:"Using the API",value:"api"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"api",mdxType:"TabItem"},(0,a.kt)("p",null,"Make sure you have the ",(0,a.kt)("inlineCode",{parentName:"p"},"composedb")," packages ",(0,a.kt)("a",{parentName:"p",href:"/docs/0.2.x/installation"},"installed"),", before running the code below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { readEncodedComposite } from '@composedb/devtools-node'\n\n// Replace by the URL of the Ceramic node you want to deploy the Models to\nconst ceramic = new CeramicClient('http://localhost:7007')\n\n// Replace by the path to the local encoded composite file\nconst composite = await readEncodedComposite(ceramic, 'my-first-composite.json')\n\nconsole.log('Model IDs to set in configuration:', composite.modelIDs)\n")),(0,a.kt)("p",null,"More details: ",(0,a.kt)("a",{parentName:"p",href:"/docs/0.2.x/api/modules/devtools_node#readencodedcomposite"},(0,a.kt)("inlineCode",{parentName:"a"},"readEncodedComposite")))),(0,a.kt)(i.Z,{value:"cli",mdxType:"TabItem"},(0,a.kt)("p",null,"First, we need to ensure the model streams are available on the target Ceramic node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:deploy my-first-composite.json --ceramic-url=http://localhost:7007\n")),(0,a.kt)("p",null,"Then we need to get the list of models that need to be set for indexing in the Ceramic node configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:models my-first-composite.json\n")))),(0,a.kt)("h2",{id:"configuring-ceramic"},"Configuring Ceramic"),(0,a.kt)("p",null,"The local Ceramic node then needs to be configured to index documents using the defined model and be able to serve queries against the index."),(0,a.kt)("p",null,"This can be done by editing Ceramic's config file, which defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.ceramic/daemon.config.json")," on Linux, macOS and WSL (Windows Subsystem for Linux), adding the necessary model stream IDs to the ",(0,a.kt)("inlineCode",{parentName:"p"},"indexing.models")," array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "indexing": {\n    ...\n    "allow-queries-before-historical-sync": true,\n    "models": ["kjzl6hvfrbw6ca7nidsnrv78x7r4xt0xki71nvwe4j5a3s9wgou8yu3aj8cz38e"]\n  }\n}\n')),(0,a.kt)("p",null,"Once it's done, the Ceramic node needs to be restarted so the index can be queried."),(0,a.kt)("h2",{id:"interacting-using-graphiql"},"Interacting using GraphiQL"),(0,a.kt)("p",null,"Once the composite is deployed and the Ceramic node configured, it is possible to start a local HTTP server to interact with the generated GraphQL schema, notably using GraphiQL:"),(0,a.kt)(r.Z,{defaultValue:"api",groupId:"api-or-cli",values:[{label:"Using the CLI",value:"cli"},{label:"Using the API",value:"api"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"api",mdxType:"TabItem"},(0,a.kt)("p",null,"Make sure you have the ",(0,a.kt)("inlineCode",{parentName:"p"},"composedb")," packages ",(0,a.kt)("a",{parentName:"p",href:"/docs/0.2.x/installation"},"installed"),", before running the code below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { serveEncodedDefinition } from '@composedb/devtools-node'\n\nconst server = await serveEncodedDefinition({\n  ceramicURL: 'http://localhost:7007',\n  graphiql: true,\n  path: new URL('my-first-composite.json', import.meta.url),\n  port: 5000,\n})\n\nconsole.log(`Server started on ${server.url}`)\n\nprocess.on('SIGTERM', () => {\n  server.close(() => {\n    console.log('Server stopped')\n  })\n})\n")),(0,a.kt)("p",null,"More details: ",(0,a.kt)("a",{parentName:"p",href:"/docs/0.2.x/api/modules/devtools_node#serveencodeddefinition"},(0,a.kt)("inlineCode",{parentName:"a"},"serveEncodedDefinition")))),(0,a.kt)(i.Z,{value:"cli",mdxType:"TabItem"},(0,a.kt)("p",null,"First, we need to compile the encoded composite definition to a runtime definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb composite:compile my-first-composite.json runtime-composite.json\n")),(0,a.kt)("p",null,"Then we can start the local server with GraphiQL using the runtime composite:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"composedb graphql:server --ceramic-url=http://localhost:7007 --graphiql --port=5000 runtime-composite.json\n")))))}f.isMDXComponent=!0},89939:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/files/my-first-composite-3536975a97af437b1f73f184c5d5aa0b.json"}}]);